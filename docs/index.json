[{"content":"Hai câu chuyện thú dị nho nhỏ mà mình vừa gặp liên quan đến mutex/lock và CPP nên ghi lại để mắc công quên.\nDeadlock Chuyện là trong công việc thì ngoài làm project chính, thỉnh thoảng mọi người cũng hay commit những cái thay đổi nho nhỏ để clean up hoặc improve codebase. Mới vài ngày trước thì đồng nghiệp mình có push một cái commit clean up như sau.\nTrạng thái ban đầu:\nvoid func() { if (a_condition_that_is_always_true) { \u0026lt;SOME_CODE\u0026gt; } doSomething(); } Sau khi thay đổi:\nvoid func() { \u0026lt;SOME_CODE\u0026gt; doSomething(); } Một thay đổi nhìn khá hiển nhiên và vô hại. Thực ra thì mình cũng hay có mấy commit kiểu vầy, tại mỗi lần dùng flag để roll out cái gì mới, roll out xong (nên mới có cái a_condition_that_is_always_true) là chẳng ai thèm nhớ (hay quan tâm) để dọn.\nCommit này cũng được merge, nhưng trước khi nó được đẩy lên production thì có một đồng nghiệp khác nhắn vào group chat là \u0026ldquo;tao nghĩ mình nên revert cái commit này vì nó có thể gây ra deadlock\u0026rdquo;.\nMình cũng tò mò vào xem thử, thì hoá ra là đoạn \u0026lt;SOME_CODE\u0026gt; đang access vào một object được gắn với mutex (vì object này có thể được access từ nhiều thread, see more here), cụ thể là đang lấy write lock trên object này để chỉnh sửa. Và bên trong hàm doSomething cũng có đoạn code access vào object này nhưng là lấy read lock. Ban đầu, khi còn cái if condition, thì write lock được obtained bên trong cái scope của if nên khi thoát ra khỏi đoạn này thì write lock đã bị destroyed, và hàm doSomething() có thể tiếp tục lấy read lock mà không có vấn đề gì cả. Nhưng vì clean up và xoá đi cái scope của if nên write lock vẫn còn đó và khi cố gắng lấy read lock thì sẽ bị dính deadlock 😵‍💫\nKhổ cái là chắc không ai để ý bên trong doSomething lại lấy lock, và cũng không để ý vụ write lock chưa được release. Với cả nói đúng hơn là cái change này không được test (chắc do thấy vô hại quá).\nVà commit này sau đó cũng được revert. Thật ra vẫn có giải pháp để clean đi mớ condition kia, đó là wrap cái write lock bên trong một cái unnamed scope:\nvoid func() { { \u0026lt;SOME_CODE\u0026gt; } doSomething(); } Garbage collector Cái này thì mình tình cờ đọc được đoạn code này thấy khá hay:\nvoid filter_some_keys_out_of_map() { vector\u0026lt;Entry\u0026gt; entriesCollector; locked_map = \u0026lt;get write lock on map\u0026gt;; for (key : locked_map) { if (key should be filtered out) { Entry entry; // empty entry swap(entry, locked_map[key]); entriesCollector.emplace_back(std::move(entry)); locked_map.erase(key); } } } Đại loại là hàm này muốn clean một số keys bên trong cái map (cũng được gắn với mutex). Nếu suy nghĩ đơn giản thì mình có thể làm như sau:\nvoid filter_some_keys_out_of_map() { locked_map = \u0026lt;get write lock on map\u0026gt;; for (key : locked_map) { if (key should be filtered out) { locked_map.erase(key); } } } Vấn đề nằm ở chỗ là khi mình gọi erase(key) trên map thì sẽ trigger destructor của Entry tại key đó. Nghĩa là ở phiên bản bên dưới thì destructor của tất cả các Entry mình erase đều sẽ được gọi while write lock vẫn còn đó (trong trường hợp này thì write lock chỉ bị destroyed khi kết thúc hàm). Và vì Entry là những object tạm coi là khá lớn, nên việc giữ write lock trong quá trình dọn dẹp này có vẻ không được tối ưu.\nVì vậy nên mới có phiên bản cồng kềnh hơn ở trên, đó là trước khi gọi erase(key) thì mình sẽ swap vào đây một cái empty Entry. Dù destructor của nó cũng vẫn sẽ bị trigger thôi nhưng vì nó nhỏ nên quá trình này sẽ diễn ra nhanh hơn. Còn cái Entry bự đã được đưa vào một cái vector bên ngoài entriesCollector. Khi kết thúc hàm này, vì write lock được declare sau nên sẽ bị destroyed trước, và sau đó mới tới entriesCollector (và các object bên trong) =\u0026gt; việc gọi destructor trên các Entry objects lớn đã được move ra khỏi thời gian giữ write lock.\n","permalink":"https://tamtamhihi.github.io/posts/random-cpp-story-1/","summary":"\u003cp\u003eHai câu chuyện thú dị nho nhỏ mà mình vừa gặp liên quan đến mutex/lock và CPP nên ghi lại để mắc công quên.\u003c/p\u003e\n\u003ch2 id=\"deadlock\"\u003eDeadlock\u003c/h2\u003e\n\u003cp\u003eChuyện là trong công việc thì ngoài làm project chính, thỉnh thoảng mọi người cũng hay commit những cái thay đổi nho nhỏ để clean up hoặc improve codebase. Mới vài ngày trước thì đồng nghiệp mình có push một cái commit clean up như sau.\u003c/p\u003e","title":"Random CPP story #1"},{"content":"Vì là bài blog đầu tiên nên mình sẽ giải thích lý do vì sao lại có trang blog này. \u0026#x1f60e; Disclaimer là bài viết có thể sẽ hơi nhamnhi đối với một số người. \u0026#x1f449; \u0026#x1f448;\nChuyện bên lề Thực tế thì mình đã muốn lập một trang blog từ rất lâu rồi (chắc phải từ lớp 10). Ban đầu là vì mới đọc xong mấy quyển sách hay nên mình muốn viết review. Sau đó thì có dịp đi xem nhạc kịch Con Dơi ở Nhà hát Thành phố nên cũng muốn viết bình luận các kiểu. Hồi đó thì mình định làm web bằng wixsite vì nó free, dễ dùng mà còn được tự trang trí web nữa. Nhưng rồi vì lười, bận đi uống trà sữa, bận làm khùng làm điên, v.v.. mà rốt cuộc cái blog review đầy nghệ thuật ấy đã không bao giờ xuất hiện.\nĐến học kỳ 2 năm nhất, mình học course CS50 và được khai sáng về GitHub Pages - cái mà mình đang dùng để host cái blog này nè. Đại loại là nó sẽ cho mình host một website cá nhân với tên miền cực kỳ xịn xò (github.io đồ) với source lấy từ repo của mình luôn; mình cũng thấy nhiều tiền bối đã tạo cái này. Nhưng hồi đó, mình chưa biết tới mấy cái site generator như Jekyll hay Hugo, cứ tưởng phải ngồi code nguyên cái web từ đầu, thấy quá mất thời gian nên dẹp luôn ý định làm. (Cái blog này mình dùng Hugo để tạo chứ hong phải mình ngồi code đâu nha mọi người, in case có ai hiểu nhầm\u0026hellip; \u0026#x1f633;) Một phần là vì thời điểm đó thì mình cũng không cảm giác có trải nghiệm gì thú vị để mà viết.\nMemory? Hiệu ứng cánh bướm Vậy thì lý do gì mà bây giờ siêng ngang? \u0026#x1f603;\nNghĩ lại thì đó là hệ quả của hiệu ứng cánh bướm, bắt đầu bằng việc lúc mới qua UK được vài ngày thì mình bị hết dung lượng Google Photos. Lẽ ra thì mình chỉ cần bỏ tiền mua dung lượng thêm để backup hình thì đã ổn (bây giờ thì mình đã mua rồi và nó cũng không quá mắc \u0026#x1f62d;). Nhưng không! Lúc ấy mình đã đưa ra lựa chọn là tắt backup hình ảnh \u0026#x1f622; Điều này kéo dài suốt 6 tuần đầu của kì internship, trước khi bi kịch xảy ra. Lúc đang cầm điện thoại search thông tin thì cái điện thoại bị hư bất đắc kỳ tử, bụp một cái đen xì màn hình. Mình có tới Samsung store để sửa nhưng họ bảo điện thoại sản xuất ở Việt Nam nên không biết sửa, làm hại phải mua điện thoại mới \u0026#x1f62d;. Mình cứ đinh ninh là lỏng pin, hư pin, nên mang điện thoại cũ về Việt Nam sửa là xong, bao hình ảnh mình chụp vẫn sẽ còn đó. Nhưng cuối cùng thì Samsung store ở Việt Nam cũng đành bó tay (họ bảo hư phần cứng \u0026#x1f626;). Tất nhiên mình cũng không mất hết hình, vì có gửi khá nhiều hình cho ba mẹ, bồ, đăng story, đăng Facebook kha khá (sống ảo cũng có lợi \u0026#x1f603;).\nĐiện thoại hư khi mình đang trên tàu rời khỏi Stonehenge. Tốn ~40 pounds để đi bus + mua vé vào Stonehenge mà xém nữa mất hết hình chụp ở đây, may là kịp gửi 2 tấm cho ba mẹ.\nTuy nhiên, vấn đề cộm cán ở đây là khi đi chơi, mình có thói quen chụp rất nhiều hình lắt nhắt, để khi xem lại sẽ nhớ ra hết từng ngóc ngách mình đã đi qua, ra hết những cảm xúc và trải nghiệm; và tất nhiên vì nó quá nhiều nên khi gửi cho ba mẹ hoặc đăng Facebook thì không thể đăng hết được.\nMột trong cả trăm tấm mình chụp linh tinh lúc chinh phục Scafell Pike (cái anh áo xanh trong hình là bạn leo núi của mình, tên là Jonas). Chuyến đi này diễn ra trước khi hư điện thoại, nhưng hên là Jonas kêu điện thoại mình chụp đẹp quá, nhờ mình chụp cảnh dùm hoài, rồi kêu mình đăng lên Drive, nên giờ mới còn hình. (mình sẽ viết về chuyến đi bão táp này ở 1 blog khác \u0026#x1f449; \u0026#x1f448;)\nCũng may là trí nhớ mình khá ổn nên mặc dù bây giờ không còn quá nhiều hình, nhưng mỗi khi nghĩ tới thì mình vẫn còn nhớ rất rõ từng chi tiết trong những chuyến đi ấy. (Giờ mình mới hiểu sao travel blogger có thể nhớ dai những chuyến đi của họ và viết thành cả cuốn sách như vậy)\nSwap area Tuy nhiên, một người thầy tên N đã từng dặn cả lớp rằng: phải ghi chép bài, vì trí nhớ là thứ không đáng tin nhất khi bước vào phòng thi. Đúng vậy! Trí nhớ thì có hạn mà những trải nghiệm thú vị thì sẽ còn xuất hiện hoài. Vậy nên mình mới định viết ra những gì mình nhớ về những chuyến đi này vào blog, xem nó như một cái \u0026ldquo;swap area\u0026rdquo; để lưu trữ những ký ức. Khi nào mình cần ôn lại kỷ niệm thì có thể load lại ngay vào bộ nhớ, bằng các giở cái blog này ra đọc vu vơ \u0026#x1f602;.\nMình là người mắc nói Tuổi thơ dữ dội Từ hồi học tiểu học, mình đã bị giáo viên chủ nhiệm phê vào sổ liên lạc mấy lần vì nói chuyện riêng trong lớp. Nhớ lại thì oan ức hết sức, tại nhỏ kế bên cứ nói nhiều mà tính mình thì lịch sự nên mình rep\u0026hellip; \u0026#x1f622; Mấy lần đó bị mẹ chửi quá chừng, nhưng thật ra dù nói chuyện nhưng mình học hành cũng không hề chểnh mảng. \u0026#x1f60e;\nLên cấp 2, mình còn bị mấy đứa trong lớp kêu là bà tám (joke nhạt từ tên Băng Tâm\u0026hellip;). Nhưng thật sự thì trong lớp mình nói nhiều thiệt. Có một lần năm lớp 7 mình bị thầy Phong (người thầy cực kỳ nghiêm khắc của biết bao thế hệ học sinh TĐN) ghi vô sổ đầu bài cũng tội nói chuyện riêng\u0026hellip; Xong cuối năm mặc dù điểm mình cũng trong top 5 hay sao đó nhưng vì bị ghi sổ đầu bài nên không được nhận thưởng gì đấy. Mình của lúc ấy lấy làm tự hào (nói chuyện mà điểm cao đồ) nên ra dẻ và đem \u0026ldquo;khoe\u0026rdquo; mẹ, bị mẹ chửi một tăng.\nIt\u0026rsquo;s all about \u0026ldquo;sự hợp gu\u0026rdquo; Kí ức tuổi thơ ấy là minh chứng cho sự \u0026ldquo;mắc nói\u0026rdquo; từ trong trứng của mình. Ấy vậy mà người nhà, họ hàng lại hay nói là mình càng lớn càng ít nói \u0026#x1f603;. Kỳ thực mình không ít nói mà là mình chỉ nói nhiều khi mình gặp chủ đề hoặc gặp người mà mình thích nói. Nếu trúng chủ đề và đúng người, mình có thể nói thao thao bất tuyệt (nạn nhân thường phải nghe những lần luyên thuyên của mình chính là bồ mình\u0026hellip; \u0026#x1f618;).\nĐây là hình chụp với team ngày cuối đi làm, và fun fact là intern manager và peers của mình đều không có trong hình (vì work from home hôm đấy \u0026#x1f602;). Những teammates trong hình dù mình không trực tiếp làm việc cùng nhưng lại rất có cảm tình và nói chuyện rất hợp gu, nói còn nhiều hơn là nói với intern manager nữa. Chắc mình hợp nói chuyện với người già\u0026hellip; Cả ngày đi làm vui nhất là bữa trưa vừa ăn vừa tám rồi sau đó vào canteen \u0026ldquo;uống cafe\u0026rdquo; tám tiếp. \u0026#x1f602; Nói chung thì nếu đã hợp gu thì mình sẽ nói cực kỳ nhiều. \u0026#x1f633;\nBroadcasting Có rất nhiều thứ \u0026ldquo;hợp gu\u0026rdquo; mà mình thích nói, mà ví dụ điển hình là việc đi du lịch như ở phần trên mình kể. Và mình thấy viết blog là cách hiệu quả nhất để \u0026ldquo;nói\u0026rdquo; - ai thấy chán thì bấm out liền còn ai thấy khoái thì đọc tiếp \u0026#x1f602; :thumbs_up:\nViệc viết blog làm mình liên tưởng tới giao thức DHCP; khi mà một client mới vào network thì chưa biết server là ai, nên nó phải tìm server bằng cách broadcast - gửi tin tới tất cả các máy trong network đó; ai cũng sẽ nhận gói tin nhưng chỉ có server mới phản hồi. Dĩ nhiên thì mình sẽ không ngồi nhắn tin cho từng người mà mình sẽ dùng blog để broadcast nha \u0026#x1f603;\nCái kết Nói tóm lại thì có 2 thứ thúc đẩy mình tạo blog: một là có nhiều trải nghiệm mà mình sợ quên, hai là bản chất mình nói nhiều (i.e viết cũng rất sung).\nBan đầu thì mình tính đăng trên Instagram, nhưng vì tính mình mắc nói thì viết cũng sẽ rất dài dòng, còn caption của Instagram thì lại có giới hạn số từ. Sẵn phát hiện là làm blog dùng mấy cái static web generator cũng khá nhanh và có GitHub Pages nữa, nên thôi quất luôn.\nVậy đó, blog đầu tiên thôi mà dài dòng quá, thôi mình kết tại đây. Mọi người nhớ đón chờ những bài viết dài dòng văn tự tiếp theo nhé! \u0026#x1f618;\n","permalink":"https://tamtamhihi.github.io/posts/mac-noi/","summary":"\u003cp\u003eVì là bài blog đầu tiên nên mình sẽ giải thích lý do vì sao lại có trang blog này. \u0026#x1f60e; Disclaimer là bài viết có thể sẽ hơi nhamnhi đối với một số người. \u0026#x1f449; \u0026#x1f448;\u003c/p\u003e\n\u003ch2 id=\"chuyện-bên-lề\"\u003eChuyện bên lề\u003c/h2\u003e\n\u003cp\u003eThực tế thì mình đã muốn lập một trang blog từ rất lâu rồi (chắc phải từ lớp 10). Ban đầu là vì mới đọc xong mấy quyển sách hay nên mình muốn viết review. Sau đó thì có dịp đi xem nhạc kịch Con Dơi ở Nhà hát Thành phố nên cũng muốn viết bình luận các kiểu. Hồi đó thì mình định làm web bằng wixsite vì nó free, dễ dùng mà còn được tự trang trí web nữa. Nhưng rồi vì lười, bận đi uống trà sữa, bận làm khùng làm điên, v.v.. mà rốt cuộc cái blog review đầy nghệ thuật ấy đã không bao giờ xuất hiện.\u003c/p\u003e","title":"\"Mắc nói\""},{"content":"","permalink":"https://tamtamhihi.github.io/tags/","summary":"","title":"Tags"}]